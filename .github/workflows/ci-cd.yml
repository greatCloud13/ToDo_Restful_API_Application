name: Todo web application API prj CI

#언제 실행하는지 설정 (트리거 설정)
on:
  push:
    branches: [main, develop]
   # 운영 개발 브랜치는 핵심이기에 항상 검증 시행
  pull_request:
    branches: [main]
    # main으로 들어오는 모든 PR은 반드시 검증 후 merge

jobs:
  #CI 작업 정의
  test:
    runs-on: ubuntu-latest #무료, 빠르고 안정적이므로 선정

    steps:
      # LEV 1. 소스코드 가져오기
      - name: Code checkout
        uses: actions/checkout@v4
        # GitHub 저장소의 코드를 CI 환경으로 다운로드

      # LEV 2. Java 환경 설정
      - name: SET JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin' #안정적인 OpenJDK

      # LEV 3. 빌드 성능 최적화
      - name: Build Performance Optimization(Gradle caching)
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # 라이브러리를 다운로드하면 시간 낭비이므로 캐싱 (2-3분 단축)

      # LEV 4. 실행 권한 설정
      - name: Gradle run permission set
        run: chmod +x ./gradlew
        #리눅스 환경에서 gradlew 스크립트 실행 권한 부여

      # LEV 5. 테스트 실행 (제일 중요)
      - name: Test run
        run: ./gradlew test --info
        env:
          SPRING_PROFILES_ACTIVE: test #테스트 전용 설정 사용

      # LEV 6. 빌드(테스트 통과시)
      - name: Build
        run: ./gradlew build -x test #-x test: 테스트는 이미 했으니 스킵
        #실제 배포 가능한 JAR 파일 생성

      # LEV 7. 테스트 결과 저장
      - name: Test result save
        uses: actions/upload-artifact@v4
        if: always() #성공/실패 관계없이 항상 업로드
        with:
          name: test-results
          path: build/reports/tests/test
          #어떤테스트가 실패 했는지 분석 가능

      # LEV 8. 빌드 결과물 저장
      - name: JAR result save
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/*.jar
          #다음 단계(배포)에서 사용할 수 있도록 저장
